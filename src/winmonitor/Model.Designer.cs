//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace XRefresh {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Model")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Model : global::System.Data.DataSet {
        
        private FoldersDataTable tableFolders;
        
        private IncludeFiltersDataTable tableIncludeFilters;
        
        private ExcludeFiltersDataTable tableExcludeFilters;
        
        private SettingsDataTable tableSettings;
        
        private GlobalIncludeFiltersDataTable tableGlobalIncludeFilters;
        
        private GlobalExcludeFiltersDataTable tableGlobalExcludeFilters;
        
        private global::System.Data.DataRelation relationFK_Folders_IncludeFilters;
        
        private global::System.Data.DataRelation relationFK_Folders_ExcludeFilters;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.ExcludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Model() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Model(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Folders"] != null)) {
                    base.Tables.Add(new FoldersDataTable(ds.Tables["Folders"]));
                }
                if ((ds.Tables["IncludeFilters"] != null)) {
                    base.Tables.Add(new IncludeFiltersDataTable(ds.Tables["IncludeFilters"]));
                }
                if ((ds.Tables["ExcludeFilters"] != null)) {
                    base.Tables.Add(new ExcludeFiltersDataTable(ds.Tables["ExcludeFilters"]));
                }
                if ((ds.Tables["Settings"] != null)) {
                    base.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
                }
                if ((ds.Tables["GlobalIncludeFilters"] != null)) {
                    base.Tables.Add(new GlobalIncludeFiltersDataTable(ds.Tables["GlobalIncludeFilters"]));
                }
                if ((ds.Tables["GlobalExcludeFilters"] != null)) {
                    base.Tables.Add(new GlobalExcludeFiltersDataTable(ds.Tables["GlobalExcludeFilters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FoldersDataTable Folders {
            get {
                return this.tableFolders;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IncludeFiltersDataTable IncludeFilters {
            get {
                return this.tableIncludeFilters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExcludeFiltersDataTable ExcludeFilters {
            get {
                return this.tableExcludeFilters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SettingsDataTable Settings {
            get {
                return this.tableSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlobalIncludeFiltersDataTable GlobalIncludeFilters {
            get {
                return this.tableGlobalIncludeFilters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlobalExcludeFiltersDataTable GlobalExcludeFilters {
            get {
                return this.tableGlobalExcludeFilters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Model cln = ((Model)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Folders"] != null)) {
                    base.Tables.Add(new FoldersDataTable(ds.Tables["Folders"]));
                }
                if ((ds.Tables["IncludeFilters"] != null)) {
                    base.Tables.Add(new IncludeFiltersDataTable(ds.Tables["IncludeFilters"]));
                }
                if ((ds.Tables["ExcludeFilters"] != null)) {
                    base.Tables.Add(new ExcludeFiltersDataTable(ds.Tables["ExcludeFilters"]));
                }
                if ((ds.Tables["Settings"] != null)) {
                    base.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
                }
                if ((ds.Tables["GlobalIncludeFilters"] != null)) {
                    base.Tables.Add(new GlobalIncludeFiltersDataTable(ds.Tables["GlobalIncludeFilters"]));
                }
                if ((ds.Tables["GlobalExcludeFilters"] != null)) {
                    base.Tables.Add(new GlobalExcludeFiltersDataTable(ds.Tables["GlobalExcludeFilters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFolders = ((FoldersDataTable)(base.Tables["Folders"]));
            if ((initTable == true)) {
                if ((this.tableFolders != null)) {
                    this.tableFolders.InitVars();
                }
            }
            this.tableIncludeFilters = ((IncludeFiltersDataTable)(base.Tables["IncludeFilters"]));
            if ((initTable == true)) {
                if ((this.tableIncludeFilters != null)) {
                    this.tableIncludeFilters.InitVars();
                }
            }
            this.tableExcludeFilters = ((ExcludeFiltersDataTable)(base.Tables["ExcludeFilters"]));
            if ((initTable == true)) {
                if ((this.tableExcludeFilters != null)) {
                    this.tableExcludeFilters.InitVars();
                }
            }
            this.tableSettings = ((SettingsDataTable)(base.Tables["Settings"]));
            if ((initTable == true)) {
                if ((this.tableSettings != null)) {
                    this.tableSettings.InitVars();
                }
            }
            this.tableGlobalIncludeFilters = ((GlobalIncludeFiltersDataTable)(base.Tables["GlobalIncludeFilters"]));
            if ((initTable == true)) {
                if ((this.tableGlobalIncludeFilters != null)) {
                    this.tableGlobalIncludeFilters.InitVars();
                }
            }
            this.tableGlobalExcludeFilters = ((GlobalExcludeFiltersDataTable)(base.Tables["GlobalExcludeFilters"]));
            if ((initTable == true)) {
                if ((this.tableGlobalExcludeFilters != null)) {
                    this.tableGlobalExcludeFilters.InitVars();
                }
            }
            this.relationFK_Folders_IncludeFilters = this.Relations["FK_Folders_IncludeFilters"];
            this.relationFK_Folders_ExcludeFilters = this.Relations["FK_Folders_ExcludeFilters"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Model";
            this.Prefix = "";
            this.Namespace = "http://xrefresh.com/model.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.ExcludeSchema;
            this.tableFolders = new FoldersDataTable();
            base.Tables.Add(this.tableFolders);
            this.tableIncludeFilters = new IncludeFiltersDataTable();
            base.Tables.Add(this.tableIncludeFilters);
            this.tableExcludeFilters = new ExcludeFiltersDataTable();
            base.Tables.Add(this.tableExcludeFilters);
            this.tableSettings = new SettingsDataTable();
            base.Tables.Add(this.tableSettings);
            this.tableGlobalIncludeFilters = new GlobalIncludeFiltersDataTable();
            base.Tables.Add(this.tableGlobalIncludeFilters);
            this.tableGlobalExcludeFilters = new GlobalExcludeFiltersDataTable();
            base.Tables.Add(this.tableGlobalExcludeFilters);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Folders_IncludeFilters", new global::System.Data.DataColumn[] {
                        this.tableFolders.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableIncludeFilters.FolderColumn});
            this.tableIncludeFilters.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Folders_ExcludeFilters", new global::System.Data.DataColumn[] {
                        this.tableFolders.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableExcludeFilters.FolderColumn});
            this.tableExcludeFilters.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_Folders_IncludeFilters = new global::System.Data.DataRelation("FK_Folders_IncludeFilters", new global::System.Data.DataColumn[] {
                        this.tableFolders.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableIncludeFilters.FolderColumn}, false);
            this.relationFK_Folders_IncludeFilters.Nested = true;
            this.Relations.Add(this.relationFK_Folders_IncludeFilters);
            this.relationFK_Folders_ExcludeFilters = new global::System.Data.DataRelation("FK_Folders_ExcludeFilters", new global::System.Data.DataColumn[] {
                        this.tableFolders.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableExcludeFilters.FolderColumn}, false);
            this.relationFK_Folders_ExcludeFilters.Nested = true;
            this.Relations.Add(this.relationFK_Folders_ExcludeFilters);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFolders() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIncludeFilters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExcludeFilters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGlobalIncludeFilters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGlobalExcludeFilters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Model ds = new Model();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FoldersRowChangeEventHandler(object sender, FoldersRowChangeEvent e);
        
        public delegate void IncludeFiltersRowChangeEventHandler(object sender, IncludeFiltersRowChangeEvent e);
        
        public delegate void ExcludeFiltersRowChangeEventHandler(object sender, ExcludeFiltersRowChangeEvent e);
        
        public delegate void SettingsRowChangeEventHandler(object sender, SettingsRowChangeEvent e);
        
        public delegate void GlobalIncludeFiltersRowChangeEventHandler(object sender, GlobalIncludeFiltersRowChangeEvent e);
        
        public delegate void GlobalExcludeFiltersRowChangeEventHandler(object sender, GlobalExcludeFiltersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FoldersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnPath;
            
            private global::System.Data.DataColumn columnEnabled;
            
            private global::System.Data.DataColumn columnType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FoldersDataTable() {
                this.TableName = "Folders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FoldersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FoldersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PathColumn {
                get {
                    return this.columnPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnabledColumn {
                get {
                    return this.columnEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FoldersRow this[int index] {
                get {
                    return ((FoldersRow)(this.Rows[index]));
                }
            }
            
            public event FoldersRowChangeEventHandler FoldersRowChanging;
            
            public event FoldersRowChangeEventHandler FoldersRowChanged;
            
            public event FoldersRowChangeEventHandler FoldersRowDeleting;
            
            public event FoldersRowChangeEventHandler FoldersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFoldersRow(FoldersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FoldersRow AddFoldersRow(string Name, string Path, bool Enabled, string Type) {
                FoldersRow rowFoldersRow = ((FoldersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Path,
                        Enabled,
                        Type};
                rowFoldersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFoldersRow);
                return rowFoldersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FoldersDataTable cln = ((FoldersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FoldersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnPath = base.Columns["Path"];
                this.columnEnabled = base.Columns["Enabled"];
                this.columnType = base.Columns["Type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPath = new global::System.Data.DataColumn("Path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPath);
                this.columnEnabled = new global::System.Data.DataColumn("Enabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnabled);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnName}, false));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnPath.AllowDBNull = false;
                this.columnEnabled.AllowDBNull = false;
                this.columnEnabled.DefaultValue = ((bool)(true));
                this.columnType.AllowDBNull = false;
                this.Locale = new global::System.Globalization.CultureInfo("");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FoldersRow NewFoldersRow() {
                return ((FoldersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FoldersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FoldersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FoldersRowChanged != null)) {
                    this.FoldersRowChanged(this, new FoldersRowChangeEvent(((FoldersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FoldersRowChanging != null)) {
                    this.FoldersRowChanging(this, new FoldersRowChangeEvent(((FoldersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FoldersRowDeleted != null)) {
                    this.FoldersRowDeleted(this, new FoldersRowChangeEvent(((FoldersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FoldersRowDeleting != null)) {
                    this.FoldersRowDeleting(this, new FoldersRowChangeEvent(((FoldersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFoldersRow(FoldersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FoldersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IncludeFiltersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMask;
            
            private global::System.Data.DataColumn columnInfo;
            
            private global::System.Data.DataColumn columnFolder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludeFiltersDataTable() {
                this.TableName = "IncludeFilters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncludeFiltersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IncludeFiltersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaskColumn {
                get {
                    return this.columnMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfoColumn {
                get {
                    return this.columnInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolderColumn {
                get {
                    return this.columnFolder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludeFiltersRow this[int index] {
                get {
                    return ((IncludeFiltersRow)(this.Rows[index]));
                }
            }
            
            public event IncludeFiltersRowChangeEventHandler IncludeFiltersRowChanging;
            
            public event IncludeFiltersRowChangeEventHandler IncludeFiltersRowChanged;
            
            public event IncludeFiltersRowChangeEventHandler IncludeFiltersRowDeleting;
            
            public event IncludeFiltersRowChangeEventHandler IncludeFiltersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIncludeFiltersRow(IncludeFiltersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludeFiltersRow AddIncludeFiltersRow(string Mask, string Info, FoldersRow parentFoldersRowByFK_Folders_IncludeFilters) {
                IncludeFiltersRow rowIncludeFiltersRow = ((IncludeFiltersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Mask,
                        Info,
                        null};
                if ((parentFoldersRowByFK_Folders_IncludeFilters != null)) {
                    columnValuesArray[2] = parentFoldersRowByFK_Folders_IncludeFilters[0];
                }
                rowIncludeFiltersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIncludeFiltersRow);
                return rowIncludeFiltersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IncludeFiltersDataTable cln = ((IncludeFiltersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IncludeFiltersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMask = base.Columns["Mask"];
                this.columnInfo = base.Columns["Info"];
                this.columnFolder = base.Columns["Folder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMask = new global::System.Data.DataColumn("Mask", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask);
                this.columnInfo = new global::System.Data.DataColumn("Info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfo);
                this.columnFolder = new global::System.Data.DataColumn("Folder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolder);
                this.columnMask.AllowDBNull = false;
                this.columnFolder.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludeFiltersRow NewIncludeFiltersRow() {
                return ((IncludeFiltersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IncludeFiltersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IncludeFiltersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IncludeFiltersRowChanged != null)) {
                    this.IncludeFiltersRowChanged(this, new IncludeFiltersRowChangeEvent(((IncludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IncludeFiltersRowChanging != null)) {
                    this.IncludeFiltersRowChanging(this, new IncludeFiltersRowChangeEvent(((IncludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IncludeFiltersRowDeleted != null)) {
                    this.IncludeFiltersRowDeleted(this, new IncludeFiltersRowChangeEvent(((IncludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IncludeFiltersRowDeleting != null)) {
                    this.IncludeFiltersRowDeleting(this, new IncludeFiltersRowChangeEvent(((IncludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIncludeFiltersRow(IncludeFiltersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IncludeFiltersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExcludeFiltersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMask;
            
            private global::System.Data.DataColumn columnInfo;
            
            private global::System.Data.DataColumn columnFolder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExcludeFiltersDataTable() {
                this.TableName = "ExcludeFilters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExcludeFiltersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExcludeFiltersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaskColumn {
                get {
                    return this.columnMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfoColumn {
                get {
                    return this.columnInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FolderColumn {
                get {
                    return this.columnFolder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExcludeFiltersRow this[int index] {
                get {
                    return ((ExcludeFiltersRow)(this.Rows[index]));
                }
            }
            
            public event ExcludeFiltersRowChangeEventHandler ExcludeFiltersRowChanging;
            
            public event ExcludeFiltersRowChangeEventHandler ExcludeFiltersRowChanged;
            
            public event ExcludeFiltersRowChangeEventHandler ExcludeFiltersRowDeleting;
            
            public event ExcludeFiltersRowChangeEventHandler ExcludeFiltersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExcludeFiltersRow(ExcludeFiltersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExcludeFiltersRow AddExcludeFiltersRow(string Mask, string Info, FoldersRow parentFoldersRowByFK_Folders_ExcludeFilters) {
                ExcludeFiltersRow rowExcludeFiltersRow = ((ExcludeFiltersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Mask,
                        Info,
                        null};
                if ((parentFoldersRowByFK_Folders_ExcludeFilters != null)) {
                    columnValuesArray[2] = parentFoldersRowByFK_Folders_ExcludeFilters[0];
                }
                rowExcludeFiltersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExcludeFiltersRow);
                return rowExcludeFiltersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExcludeFiltersDataTable cln = ((ExcludeFiltersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExcludeFiltersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMask = base.Columns["Mask"];
                this.columnInfo = base.Columns["Info"];
                this.columnFolder = base.Columns["Folder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMask = new global::System.Data.DataColumn("Mask", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask);
                this.columnInfo = new global::System.Data.DataColumn("Info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfo);
                this.columnFolder = new global::System.Data.DataColumn("Folder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolder);
                this.columnMask.AllowDBNull = false;
                this.columnFolder.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExcludeFiltersRow NewExcludeFiltersRow() {
                return ((ExcludeFiltersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExcludeFiltersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExcludeFiltersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExcludeFiltersRowChanged != null)) {
                    this.ExcludeFiltersRowChanged(this, new ExcludeFiltersRowChangeEvent(((ExcludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExcludeFiltersRowChanging != null)) {
                    this.ExcludeFiltersRowChanging(this, new ExcludeFiltersRowChangeEvent(((ExcludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExcludeFiltersRowDeleted != null)) {
                    this.ExcludeFiltersRowDeleted(this, new ExcludeFiltersRowChangeEvent(((ExcludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExcludeFiltersRowDeleting != null)) {
                    this.ExcludeFiltersRowDeleting(this, new ExcludeFiltersRowChangeEvent(((ExcludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExcludeFiltersRow(ExcludeFiltersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExcludeFiltersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SettingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRunOnWindowsStartup;
            
            private global::System.Data.DataColumn columnShowGlobalIncludes;
            
            private global::System.Data.DataColumn columnShowGlobalExcludes;
            
            private global::System.Data.DataColumn columnPlaySoundOnRefresh;
            
            private global::System.Data.DataColumn columnSoundFile;
            
            private global::System.Data.DataColumn columnFlashIconOnRefresh;
            
            private global::System.Data.DataColumn columnPort;
            
            private global::System.Data.DataColumn columnLocalhostOnly;
            
            private global::System.Data.DataColumn columnSlaveHost;
            
            private global::System.Data.DataColumn columnPortRange;
            
            private global::System.Data.DataColumn columnWaitingTimeout;
            
            private global::System.Data.DataColumn columnCheckForUpdates;
            
            private global::System.Data.DataColumn columnSendUsage;
            
            private global::System.Data.DataColumn columnEnableLogging;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsDataTable() {
                this.TableName = "Settings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SettingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunOnWindowsStartupColumn {
                get {
                    return this.columnRunOnWindowsStartup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShowGlobalIncludesColumn {
                get {
                    return this.columnShowGlobalIncludes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShowGlobalExcludesColumn {
                get {
                    return this.columnShowGlobalExcludes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlaySoundOnRefreshColumn {
                get {
                    return this.columnPlaySoundOnRefresh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoundFileColumn {
                get {
                    return this.columnSoundFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlashIconOnRefreshColumn {
                get {
                    return this.columnFlashIconOnRefresh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortColumn {
                get {
                    return this.columnPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalhostOnlyColumn {
                get {
                    return this.columnLocalhostOnly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SlaveHostColumn {
                get {
                    return this.columnSlaveHost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortRangeColumn {
                get {
                    return this.columnPortRange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaitingTimeoutColumn {
                get {
                    return this.columnWaitingTimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckForUpdatesColumn {
                get {
                    return this.columnCheckForUpdates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendUsageColumn {
                get {
                    return this.columnSendUsage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnableLoggingColumn {
                get {
                    return this.columnEnableLogging;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow this[int index] {
                get {
                    return ((SettingsRow)(this.Rows[index]));
                }
            }
            
            public event SettingsRowChangeEventHandler SettingsRowChanging;
            
            public event SettingsRowChangeEventHandler SettingsRowChanged;
            
            public event SettingsRowChangeEventHandler SettingsRowDeleting;
            
            public event SettingsRowChangeEventHandler SettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSettingsRow(SettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow AddSettingsRow(bool RunOnWindowsStartup, bool ShowGlobalIncludes, bool ShowGlobalExcludes, bool PlaySoundOnRefresh, string SoundFile, bool FlashIconOnRefresh, int Port, bool LocalhostOnly, string SlaveHost, int PortRange, int WaitingTimeout, bool CheckForUpdates, bool SendUsage, bool EnableLogging) {
                SettingsRow rowSettingsRow = ((SettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RunOnWindowsStartup,
                        ShowGlobalIncludes,
                        ShowGlobalExcludes,
                        PlaySoundOnRefresh,
                        SoundFile,
                        FlashIconOnRefresh,
                        Port,
                        LocalhostOnly,
                        SlaveHost,
                        PortRange,
                        WaitingTimeout,
                        CheckForUpdates,
                        SendUsage,
                        EnableLogging};
                rowSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSettingsRow);
                return rowSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SettingsDataTable cln = ((SettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRunOnWindowsStartup = base.Columns["RunOnWindowsStartup"];
                this.columnShowGlobalIncludes = base.Columns["ShowGlobalIncludes"];
                this.columnShowGlobalExcludes = base.Columns["ShowGlobalExcludes"];
                this.columnPlaySoundOnRefresh = base.Columns["PlaySoundOnRefresh"];
                this.columnSoundFile = base.Columns["SoundFile"];
                this.columnFlashIconOnRefresh = base.Columns["FlashIconOnRefresh"];
                this.columnPort = base.Columns["Port"];
                this.columnLocalhostOnly = base.Columns["LocalhostOnly"];
                this.columnSlaveHost = base.Columns["SlaveHost"];
                this.columnPortRange = base.Columns["PortRange"];
                this.columnWaitingTimeout = base.Columns["WaitingTimeout"];
                this.columnCheckForUpdates = base.Columns["CheckForUpdates"];
                this.columnSendUsage = base.Columns["SendUsage"];
                this.columnEnableLogging = base.Columns["EnableLogging"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRunOnWindowsStartup = new global::System.Data.DataColumn("RunOnWindowsStartup", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunOnWindowsStartup);
                this.columnShowGlobalIncludes = new global::System.Data.DataColumn("ShowGlobalIncludes", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowGlobalIncludes);
                this.columnShowGlobalExcludes = new global::System.Data.DataColumn("ShowGlobalExcludes", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowGlobalExcludes);
                this.columnPlaySoundOnRefresh = new global::System.Data.DataColumn("PlaySoundOnRefresh", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlaySoundOnRefresh);
                this.columnSoundFile = new global::System.Data.DataColumn("SoundFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoundFile);
                this.columnFlashIconOnRefresh = new global::System.Data.DataColumn("FlashIconOnRefresh", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlashIconOnRefresh);
                this.columnPort = new global::System.Data.DataColumn("Port", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPort);
                this.columnLocalhostOnly = new global::System.Data.DataColumn("LocalhostOnly", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalhostOnly);
                this.columnSlaveHost = new global::System.Data.DataColumn("SlaveHost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlaveHost);
                this.columnPortRange = new global::System.Data.DataColumn("PortRange", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortRange);
                this.columnWaitingTimeout = new global::System.Data.DataColumn("WaitingTimeout", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaitingTimeout);
                this.columnCheckForUpdates = new global::System.Data.DataColumn("CheckForUpdates", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckForUpdates);
                this.columnSendUsage = new global::System.Data.DataColumn("SendUsage", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendUsage);
                this.columnEnableLogging = new global::System.Data.DataColumn("EnableLogging", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnableLogging);
                this.columnRunOnWindowsStartup.AllowDBNull = false;
                this.columnRunOnWindowsStartup.DefaultValue = ((bool)(false));
                this.columnShowGlobalIncludes.AllowDBNull = false;
                this.columnShowGlobalIncludes.DefaultValue = ((bool)(false));
                this.columnShowGlobalExcludes.AllowDBNull = false;
                this.columnShowGlobalExcludes.DefaultValue = ((bool)(false));
                this.columnPlaySoundOnRefresh.AllowDBNull = false;
                this.columnPlaySoundOnRefresh.DefaultValue = ((bool)(false));
                this.columnSoundFile.AllowDBNull = false;
                this.columnSoundFile.DefaultValue = ((string)("drum.wav"));
                this.columnFlashIconOnRefresh.AllowDBNull = false;
                this.columnFlashIconOnRefresh.DefaultValue = ((bool)(true));
                this.columnPort.AllowDBNull = false;
                this.columnPort.DefaultValue = ((int)(41258));
                this.columnLocalhostOnly.AllowDBNull = false;
                this.columnLocalhostOnly.DefaultValue = ((bool)(true));
                this.columnSlaveHost.AllowDBNull = false;
                this.columnSlaveHost.DefaultValue = ((string)("localhost"));
                this.columnPortRange.AllowDBNull = false;
                this.columnPortRange.DefaultValue = ((int)(16));
                this.columnWaitingTimeout.AllowDBNull = false;
                this.columnWaitingTimeout.DefaultValue = ((int)(300));
                this.columnCheckForUpdates.AllowDBNull = false;
                this.columnCheckForUpdates.DefaultValue = ((bool)(true));
                this.columnSendUsage.AllowDBNull = false;
                this.columnSendUsage.DefaultValue = ((bool)(true));
                this.columnEnableLogging.AllowDBNull = false;
                this.columnEnableLogging.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow NewSettingsRow() {
                return ((SettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SettingsRowChanged != null)) {
                    this.SettingsRowChanged(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SettingsRowChanging != null)) {
                    this.SettingsRowChanging(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SettingsRowDeleted != null)) {
                    this.SettingsRowDeleted(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SettingsRowDeleting != null)) {
                    this.SettingsRowDeleting(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSettingsRow(SettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GlobalIncludeFiltersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMask;
            
            private global::System.Data.DataColumn columnInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalIncludeFiltersDataTable() {
                this.TableName = "GlobalIncludeFilters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalIncludeFiltersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GlobalIncludeFiltersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaskColumn {
                get {
                    return this.columnMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfoColumn {
                get {
                    return this.columnInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalIncludeFiltersRow this[int index] {
                get {
                    return ((GlobalIncludeFiltersRow)(this.Rows[index]));
                }
            }
            
            public event GlobalIncludeFiltersRowChangeEventHandler GlobalIncludeFiltersRowChanging;
            
            public event GlobalIncludeFiltersRowChangeEventHandler GlobalIncludeFiltersRowChanged;
            
            public event GlobalIncludeFiltersRowChangeEventHandler GlobalIncludeFiltersRowDeleting;
            
            public event GlobalIncludeFiltersRowChangeEventHandler GlobalIncludeFiltersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGlobalIncludeFiltersRow(GlobalIncludeFiltersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalIncludeFiltersRow AddGlobalIncludeFiltersRow(string Mask, string Info) {
                GlobalIncludeFiltersRow rowGlobalIncludeFiltersRow = ((GlobalIncludeFiltersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Mask,
                        Info};
                rowGlobalIncludeFiltersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGlobalIncludeFiltersRow);
                return rowGlobalIncludeFiltersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GlobalIncludeFiltersDataTable cln = ((GlobalIncludeFiltersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GlobalIncludeFiltersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMask = base.Columns["Mask"];
                this.columnInfo = base.Columns["Info"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMask = new global::System.Data.DataColumn("Mask", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask);
                this.columnInfo = new global::System.Data.DataColumn("Info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfo);
                this.columnMask.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalIncludeFiltersRow NewGlobalIncludeFiltersRow() {
                return ((GlobalIncludeFiltersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GlobalIncludeFiltersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GlobalIncludeFiltersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlobalIncludeFiltersRowChanged != null)) {
                    this.GlobalIncludeFiltersRowChanged(this, new GlobalIncludeFiltersRowChangeEvent(((GlobalIncludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlobalIncludeFiltersRowChanging != null)) {
                    this.GlobalIncludeFiltersRowChanging(this, new GlobalIncludeFiltersRowChangeEvent(((GlobalIncludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlobalIncludeFiltersRowDeleted != null)) {
                    this.GlobalIncludeFiltersRowDeleted(this, new GlobalIncludeFiltersRowChangeEvent(((GlobalIncludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlobalIncludeFiltersRowDeleting != null)) {
                    this.GlobalIncludeFiltersRowDeleting(this, new GlobalIncludeFiltersRowChangeEvent(((GlobalIncludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGlobalIncludeFiltersRow(GlobalIncludeFiltersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GlobalIncludeFiltersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GlobalExcludeFiltersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMask;
            
            private global::System.Data.DataColumn columnInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalExcludeFiltersDataTable() {
                this.TableName = "GlobalExcludeFilters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalExcludeFiltersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GlobalExcludeFiltersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaskColumn {
                get {
                    return this.columnMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfoColumn {
                get {
                    return this.columnInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalExcludeFiltersRow this[int index] {
                get {
                    return ((GlobalExcludeFiltersRow)(this.Rows[index]));
                }
            }
            
            public event GlobalExcludeFiltersRowChangeEventHandler GlobalExcludeFiltersRowChanging;
            
            public event GlobalExcludeFiltersRowChangeEventHandler GlobalExcludeFiltersRowChanged;
            
            public event GlobalExcludeFiltersRowChangeEventHandler GlobalExcludeFiltersRowDeleting;
            
            public event GlobalExcludeFiltersRowChangeEventHandler GlobalExcludeFiltersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGlobalExcludeFiltersRow(GlobalExcludeFiltersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalExcludeFiltersRow AddGlobalExcludeFiltersRow(string Mask, string Info) {
                GlobalExcludeFiltersRow rowGlobalExcludeFiltersRow = ((GlobalExcludeFiltersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Mask,
                        Info};
                rowGlobalExcludeFiltersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGlobalExcludeFiltersRow);
                return rowGlobalExcludeFiltersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GlobalExcludeFiltersDataTable cln = ((GlobalExcludeFiltersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GlobalExcludeFiltersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMask = base.Columns["Mask"];
                this.columnInfo = base.Columns["Info"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMask = new global::System.Data.DataColumn("Mask", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask);
                this.columnInfo = new global::System.Data.DataColumn("Info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfo);
                this.columnMask.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalExcludeFiltersRow NewGlobalExcludeFiltersRow() {
                return ((GlobalExcludeFiltersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GlobalExcludeFiltersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GlobalExcludeFiltersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlobalExcludeFiltersRowChanged != null)) {
                    this.GlobalExcludeFiltersRowChanged(this, new GlobalExcludeFiltersRowChangeEvent(((GlobalExcludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlobalExcludeFiltersRowChanging != null)) {
                    this.GlobalExcludeFiltersRowChanging(this, new GlobalExcludeFiltersRowChangeEvent(((GlobalExcludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlobalExcludeFiltersRowDeleted != null)) {
                    this.GlobalExcludeFiltersRowDeleted(this, new GlobalExcludeFiltersRowChangeEvent(((GlobalExcludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlobalExcludeFiltersRowDeleting != null)) {
                    this.GlobalExcludeFiltersRowDeleting(this, new GlobalExcludeFiltersRowChangeEvent(((GlobalExcludeFiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGlobalExcludeFiltersRow(GlobalExcludeFiltersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GlobalExcludeFiltersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FoldersRow : global::System.Data.DataRow {
            
            private FoldersDataTable tableFolders;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FoldersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFolders = ((FoldersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFolders.NameColumn]));
                }
                set {
                    this[this.tableFolders.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Path {
                get {
                    return ((string)(this[this.tableFolders.PathColumn]));
                }
                set {
                    this[this.tableFolders.PathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Enabled {
                get {
                    return ((bool)(this[this.tableFolders.EnabledColumn]));
                }
                set {
                    this[this.tableFolders.EnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableFolders.TypeColumn]));
                }
                set {
                    this[this.tableFolders.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludeFiltersRow[] GetIncludeFiltersRows() {
                if ((this.Table.ChildRelations["FK_Folders_IncludeFilters"] == null)) {
                    return new IncludeFiltersRow[0];
                }
                else {
                    return ((IncludeFiltersRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Folders_IncludeFilters"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExcludeFiltersRow[] GetExcludeFiltersRows() {
                if ((this.Table.ChildRelations["FK_Folders_ExcludeFilters"] == null)) {
                    return new ExcludeFiltersRow[0];
                }
                else {
                    return ((ExcludeFiltersRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Folders_ExcludeFilters"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IncludeFiltersRow : global::System.Data.DataRow {
            
            private IncludeFiltersDataTable tableIncludeFilters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncludeFiltersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIncludeFilters = ((IncludeFiltersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask {
                get {
                    return ((string)(this[this.tableIncludeFilters.MaskColumn]));
                }
                set {
                    this[this.tableIncludeFilters.MaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Info {
                get {
                    if (this.IsInfoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableIncludeFilters.InfoColumn]));
                    }
                }
                set {
                    this[this.tableIncludeFilters.InfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Folder {
                get {
                    return ((string)(this[this.tableIncludeFilters.FolderColumn]));
                }
                set {
                    this[this.tableIncludeFilters.FolderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FoldersRow FoldersRow {
                get {
                    return ((FoldersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Folders_IncludeFilters"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Folders_IncludeFilters"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfoNull() {
                return this.IsNull(this.tableIncludeFilters.InfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfoNull() {
                this[this.tableIncludeFilters.InfoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExcludeFiltersRow : global::System.Data.DataRow {
            
            private ExcludeFiltersDataTable tableExcludeFilters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExcludeFiltersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExcludeFilters = ((ExcludeFiltersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask {
                get {
                    return ((string)(this[this.tableExcludeFilters.MaskColumn]));
                }
                set {
                    this[this.tableExcludeFilters.MaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Info {
                get {
                    if (this.IsInfoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableExcludeFilters.InfoColumn]));
                    }
                }
                set {
                    this[this.tableExcludeFilters.InfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Folder {
                get {
                    return ((string)(this[this.tableExcludeFilters.FolderColumn]));
                }
                set {
                    this[this.tableExcludeFilters.FolderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FoldersRow FoldersRow {
                get {
                    return ((FoldersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Folders_ExcludeFilters"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Folders_ExcludeFilters"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfoNull() {
                return this.IsNull(this.tableExcludeFilters.InfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfoNull() {
                this[this.tableExcludeFilters.InfoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SettingsRow : global::System.Data.DataRow {
            
            private SettingsDataTable tableSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSettings = ((SettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RunOnWindowsStartup {
                get {
                    return ((bool)(this[this.tableSettings.RunOnWindowsStartupColumn]));
                }
                set {
                    this[this.tableSettings.RunOnWindowsStartupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShowGlobalIncludes {
                get {
                    return ((bool)(this[this.tableSettings.ShowGlobalIncludesColumn]));
                }
                set {
                    this[this.tableSettings.ShowGlobalIncludesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShowGlobalExcludes {
                get {
                    return ((bool)(this[this.tableSettings.ShowGlobalExcludesColumn]));
                }
                set {
                    this[this.tableSettings.ShowGlobalExcludesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PlaySoundOnRefresh {
                get {
                    return ((bool)(this[this.tableSettings.PlaySoundOnRefreshColumn]));
                }
                set {
                    this[this.tableSettings.PlaySoundOnRefreshColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoundFile {
                get {
                    return ((string)(this[this.tableSettings.SoundFileColumn]));
                }
                set {
                    this[this.tableSettings.SoundFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FlashIconOnRefresh {
                get {
                    return ((bool)(this[this.tableSettings.FlashIconOnRefreshColumn]));
                }
                set {
                    this[this.tableSettings.FlashIconOnRefreshColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Port {
                get {
                    return ((int)(this[this.tableSettings.PortColumn]));
                }
                set {
                    this[this.tableSettings.PortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LocalhostOnly {
                get {
                    return ((bool)(this[this.tableSettings.LocalhostOnlyColumn]));
                }
                set {
                    this[this.tableSettings.LocalhostOnlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SlaveHost {
                get {
                    return ((string)(this[this.tableSettings.SlaveHostColumn]));
                }
                set {
                    this[this.tableSettings.SlaveHostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortRange {
                get {
                    return ((int)(this[this.tableSettings.PortRangeColumn]));
                }
                set {
                    this[this.tableSettings.PortRangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WaitingTimeout {
                get {
                    return ((int)(this[this.tableSettings.WaitingTimeoutColumn]));
                }
                set {
                    this[this.tableSettings.WaitingTimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CheckForUpdates {
                get {
                    return ((bool)(this[this.tableSettings.CheckForUpdatesColumn]));
                }
                set {
                    this[this.tableSettings.CheckForUpdatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SendUsage {
                get {
                    return ((bool)(this[this.tableSettings.SendUsageColumn]));
                }
                set {
                    this[this.tableSettings.SendUsageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EnableLogging {
                get {
                    return ((bool)(this[this.tableSettings.EnableLoggingColumn]));
                }
                set {
                    this[this.tableSettings.EnableLoggingColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GlobalIncludeFiltersRow : global::System.Data.DataRow {
            
            private GlobalIncludeFiltersDataTable tableGlobalIncludeFilters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalIncludeFiltersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGlobalIncludeFilters = ((GlobalIncludeFiltersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask {
                get {
                    return ((string)(this[this.tableGlobalIncludeFilters.MaskColumn]));
                }
                set {
                    this[this.tableGlobalIncludeFilters.MaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Info {
                get {
                    if (this.IsInfoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGlobalIncludeFilters.InfoColumn]));
                    }
                }
                set {
                    this[this.tableGlobalIncludeFilters.InfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfoNull() {
                return this.IsNull(this.tableGlobalIncludeFilters.InfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfoNull() {
                this[this.tableGlobalIncludeFilters.InfoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GlobalExcludeFiltersRow : global::System.Data.DataRow {
            
            private GlobalExcludeFiltersDataTable tableGlobalExcludeFilters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalExcludeFiltersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGlobalExcludeFilters = ((GlobalExcludeFiltersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask {
                get {
                    return ((string)(this[this.tableGlobalExcludeFilters.MaskColumn]));
                }
                set {
                    this[this.tableGlobalExcludeFilters.MaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Info {
                get {
                    if (this.IsInfoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGlobalExcludeFilters.InfoColumn]));
                    }
                }
                set {
                    this[this.tableGlobalExcludeFilters.InfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfoNull() {
                return this.IsNull(this.tableGlobalExcludeFilters.InfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfoNull() {
                this[this.tableGlobalExcludeFilters.InfoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FoldersRowChangeEvent : global::System.EventArgs {
            
            private FoldersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FoldersRowChangeEvent(FoldersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FoldersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IncludeFiltersRowChangeEvent : global::System.EventArgs {
            
            private IncludeFiltersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludeFiltersRowChangeEvent(IncludeFiltersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludeFiltersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExcludeFiltersRowChangeEvent : global::System.EventArgs {
            
            private ExcludeFiltersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExcludeFiltersRowChangeEvent(ExcludeFiltersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExcludeFiltersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SettingsRowChangeEvent : global::System.EventArgs {
            
            private SettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRowChangeEvent(SettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GlobalIncludeFiltersRowChangeEvent : global::System.EventArgs {
            
            private GlobalIncludeFiltersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalIncludeFiltersRowChangeEvent(GlobalIncludeFiltersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalIncludeFiltersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GlobalExcludeFiltersRowChangeEvent : global::System.EventArgs {
            
            private GlobalExcludeFiltersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalExcludeFiltersRowChangeEvent(GlobalExcludeFiltersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalExcludeFiltersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591